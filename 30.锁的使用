锁的分类：
    1.从对数据操作的类型（读/写）分
    2.从对数据操作的粒度分
三锁：
    表锁（偏读）
        偏向myisam存储引擎，开销小，加锁快；无死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低
        手动增加锁：lock table 表名 read(write),表名字2 read(write),其他;
        查看锁：show open tables;
        释放表：unlock tables;

        如果session1给table1加了读锁，session1可以读table1，不可以写table1，不可读其他表table2(必须先解锁)。
        session2可以读table1。如果写table1就会发生阻塞，可以读其他表table2。

        如果session1给table1加了写锁，session1可以读table1，可以写table1，不可读其他表table2。(必须先解锁)。
        session2读，写table1会发生阻塞，可以读写其他表table2。
    行锁（偏写）
        特点：
            1.偏向InnoDB存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高
            2.InnoDB与MyISAM最大不同有两点：一是支持事务；二是采用了行级锁
        语法：set autocommit=0;将自动提交关掉
        如果session1更新第4行数据，session2也更新第4行数据，session2就会出现阻塞。当session1 commit(提交)时，才不会阻塞
        如果session1和session2更新不同行数据，互不影响。
        如果session1更新第4行数据后，session2读取第4行数据。读的是原来的数据。当session1 commit后。session才能读到最小数据

        索引失效，行锁变表锁

    间隙锁：
        当我们用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁;对于键
        值在条件范围内但并不存在的记录，叫做间隙,InnoDB也会对这个间隙加锁，这种锁的机制就是间隙锁。

        理解：就是set autocommit=0;将自动提交关掉session1操作update table1 SET a=2000 WHERE b BETWEEN 2 AND 9;
        但是此表中没有b=3的数据。但是也会将b=3加锁。session2执行insert into table1 values(1,3);时就会发生阻塞。

    锁定某一行：
        SELECT * FROM table1 WHERE a=8 FOR UPDATE;
