#explain
    是什么：可以模拟优化器执行SQL查询语句，从而知道mysql是如何处理你的SQL语句。
            分析你的查询语句或是表结构的性能瓶颈

    能干嘛：表的读取顺序
            数据读取操作的操作类型
            哪些索引可以使用
            哪些索引被实际使用
            表之间的引用
            每张表有多少行被优化器查询
    怎么用：explain+sql语句
            包含信息：
            id
                id相同，执行顺序由上至下
                id不同，如果是子查询，id的序号会增加，id值越大优先级越高，越先执行
                id既有相同又有不同。按照上面规则执行
            select_type
                SIMPLE:         简单的SELECT 查询，查询中不包含子查询或者UNION
                PRIMARY:        查询中若包含任何的子查询，最外层查询的标记
                SUBQUERY:       在SELECT或WHERE列表中包含了子查询
                DERIVED:        在FROM列表中包含的子查询被标记为DERIVED(衍生)
                                mysql会递归执行这些子查询，把结果放在临时表里
                UNION:          若第二个SELECT 出现在UNION之后，则被标记为UNION
                                若UNION包含在FROM字句的子查询中，外层SELECT被标记为：DERIVED
                UNION RESULT:   从UNION表获取结果的SELECT
            table
                显示这一行数据是哪张表的
            type
                对表的扫描
                ALL,index,range,ref,eq_ref,const,system,NULL
                访问类型排列
                从最好到最差的依次是：
                system>const>eq_ref>ref>range>index>ALL
                    system： 表只有一行记录（等于系统表），这是const类型的特征，忽略
                    const：  表示通过索引依次就找到了，const用于比较primary key或者
                             unique索引。因为只匹配一行数据，所以很快如将主键置于
                             WHERE列表中，MYSQL就能将该查询转换为一个常量
                    eq_ref： 唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配
                             。常见于主键或唯一索引扫描
                    ref：    非唯一性索引扫描，返回匹配某个单独值的所有行。
                             本质上也是一种索引访问，他返回所有匹配某个单独值的行
                             他可能会找到多个符号条件的行，所以他应该属于查找和扫描的混合体
                    range：  只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引
                             一般就是在你的WHERE语句中出现了between，<,>,in等查询
                    index：  全索引扫描
                    ALL：    全表扫描
            possible_keys
                显示可能应用在这张表中的索引，一个或多个。
                查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用
            key
                实际使用的索引。如果为NULL，则没有使用索引
                查询中若使用了覆盖索引，则该索引仅出现在key列表中
            key_len
                表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好
                key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len使根据表定义计算而得，不是通过表内检索出的
            ref:
                显示索引的哪一列被使用了，如果可能的话，是一个长度。哪些列或常量被用于查找索引列上的值
            rows
                根据表统计信息及索引选用情况，大致估算出所需的记录所需读取的行数
            extra
                Using filesort： 说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。
                                MYSQL中无法利用索引完成的排序操作称为文件排序
                Using temporary：使用了临时表保存中间结果，mysql在对查询结果排序时使用临时表。常见排序order by
                Using index：    表示相应的SELECT 操作中使用了覆盖索引，避免访问了表的数据行，效率不错
                                 如果同时出现Using where，表名索引被用来执行索引键值的查找；
                                 如果没有同时出现Using where,表名索引用来读取数据而非执行查找动作
                                 覆盖索引
                Using where：    表明使用了where过滤
                Using join buffer:使用了连接缓存
